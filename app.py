import streamlit as st
import cv2
import pickle
from create_features import FeatureExtractor
from PIL import Image
import numpy as np

# === Configuraci√≥n de la p√°gina ===
st.set_page_config(
    page_title="Ejercicios OpenCV - 11 Cap√≠tulos",
    page_icon="üìö",
    layout="wide"
)

# === Cargar modelos (para Cap√≠tulo 9) ===
@st.cache_resource
def cargar_modelos():
    try:
        CODEBOOK_FILE = "models/codebook.pkl"
        SVM_FILE = "models/svm_model.pkl"
        
        with open(CODEBOOK_FILE, "rb") as f:
            kmeans, centroids = pickle.load(f)

        with open(SVM_FILE, "rb") as f:
            svm = pickle.load(f)
            
        return kmeans, centroids, svm
    except:
        return None, None, None

kmeans, centroids, svm = cargar_modelos()

# === Definir el clasificador (Cap√≠tulo 9) ===
class ImageClassifier:
    def __init__(self, svm, kmeans, centroids):
        self.svm = svm
        self.kmeans = kmeans
        self.centroids = centroids
        self.extractor = FeatureExtractor()

    def predict(self, img_array):
        fv = self.extractor.get_feature_vector(img_array, self.kmeans, self.centroids)
        return self.svm.classify(fv)[0]

classifier = ImageClassifier(svm, kmeans, centroids) if svm else None

# === Funciones auxiliares ===
def cargar_imagen():
    uploaded_file = st.file_uploader("Sube una imagen", type=['jpg', 'jpeg', 'png'])
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        return cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
    return None

def mostrar_imagenes(original, resultado, titulo_resultado="Resultado"):
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Imagen Original")
        st.image(original, channels="BGR")
    with col2:
        st.subheader(titulo_resultado)
        st.image(resultado, channels="BGR")

# === Funci√≥n para Cap√≠tulo 1 ===
def ejercicio_capitulo1(imagen):
    """Convierte la imagen a escala de grises"""
    gray_img = cv2.cvtColor(imagen, cv2.COLOR_BGR2GRAY)
    return gray_img

# === Sidebar para navegaci√≥n ===
st.sidebar.title("üìö Navegaci√≥n de Cap√≠tulos")
capitulo = st.sidebar.selectbox(
    "Selecciona un cap√≠tulo:",
    [
        "Introducci√≥n", 
        "Cap√≠tulo 1", "Cap√≠tulo 2", "Cap√≠tulo 3", "Cap√≠tulo 4", "Cap√≠tulo 5",
        "Cap√≠tulo 6", "Cap√≠tulo 7", "Cap√≠tulo 8", "Cap√≠tulo 9", "Cap√≠tulo 10", "Cap√≠tulo 11"
    ]
)

# === Contenido principal ===
st.title("üìö Ejercicios de OpenCV - 11 Cap√≠tulos")
st.markdown("---")

if capitulo == "Introducci√≥n":
    st.header("Bienvenido a los Ejercicios de OpenCV")
    st.write("""
    Esta aplicaci√≥n contiene los ejercicios de los 11 cap√≠tulos de OpenCV.
    
    **Instrucciones:**
    1. Selecciona un cap√≠tulo en el sidebar
    2. Sube una imagen para probar los algoritmos
    3. Explora los diferentes resultados
    """)
    
elif capitulo == "Cap√≠tulo 1":
    st.header("üéØ Cap√≠tulo 1: Introducci√≥n a OpenCV")
    st.write("**Ejercicio:** Conversi√≥n de imagen a escala de grises")
    
    img = cargar_imagen()
    if img is not None:
        with st.spinner("Procesando imagen..."):
            resultado = ejercicio_capitulo1(img)
        
        mostrar_imagenes(img, resultado, "Imagen en Escala de Grises")
        
        # Informaci√≥n adicional
        st.markdown("---")
        col_info1, col_info2 = st.columns(2)
        with col_info1:
            st.info(f"**Dimensi√≥n original:** {img.shape[1]} x {img.shape[0]} px")
        with col_info2:
            st.info(f"**Dimensi√≥n resultado:** {resultado.shape[1]} x {resultado.shape[0]} px")
        
        # Opci√≥n para descargar el resultado
        st.markdown("---")
        st.subheader("üíæ Descargar Resultado")
        # Convertir para descarga
        result_pil = Image.fromarray(resultado)
        img_bytes = io.BytesIO()
        result_pil.save(img_bytes, format='JPEG')
        
        st.download_button(
            label="Descargar imagen en escala de grises",
            data=img_bytes.getvalue(),
            file_name="imagen_escala_grises.jpg",
            mime="image/jpeg"
        )

elif capitulo == "Cap√≠tulo 2":
    st.header("Cap√≠tulo 2: Operaciones B√°sicas")
    st.write("Aqu√≠ va tu ejercicio del cap√≠tulo 2")
    img = cargar_imagen()
    if img is not None:
        # ESPACIO PARA TU C√ìDIGO DEL CAP√çTULO 2
        st.info("Pendiente: Integrar c√≥digo del Cap√≠tulo 2")

elif capitulo == "Cap√≠tulo 3":
    st.header("Cap√≠tulo 3: Transformaciones de Imagen")
    st.write("Aqu√≠ va tu ejercicio del cap√≠tulo 3")
    img = cargar_imagen()
    if img is not None:
        # ESPACIO PARA TU C√ìDIGO DEL CAP√çTULO 3
        st.info("Pendiente: Integrar c√≥digo del Cap√≠tulo 3")

elif capitulo == "Cap√≠tulo 4":
    st.header("Cap√≠tulo 4: Filtros y Convoluci√≥n")
    st.write("Aqu√≠ va tu ejercicio del cap√≠tulo 4")
    img = cargar_imagen()
    if img is not None:
        # ESPACIO PARA TU C√ìDIGO DEL CAP√çTULO 4
        st.info("Pendiente: Integrar c√≥digo del Cap√≠tulo 4")

elif capitulo == "Cap√≠tulo 5":
    st.header("Cap√≠tulo 5: Detecci√≥n de Bordes")
    st.write("Aqu√≠ va tu ejercicio del cap√≠tulo 5")
    img = cargar_imagen()
    if img is not None:
        # ESPACIO PARA TU C√ìDIGO DEL CAP√çTULO 5
        st.info("Pendiente: Integrar c√≥digo del Cap√≠tulo 5")

elif capitulo == "Cap√≠tulo 6":
    st.header("Cap√≠tulo 6: Transformaciones Morfol√≥gicas")
    st.write("Aqu√≠ va tu ejercicio del cap√≠tulo 6")
    img = cargar_imagen()
    if img is not None:
        # ESPACIO PARA TU C√ìDIGO DEL CAP√çTULO 6
        st.info("Pendiente: Integrar c√≥digo del Cap√≠tulo 6")

elif capitulo == "Cap√≠tulo 7":
    st.header("Cap√≠tulo 7: Segmentaci√≥n de Im√°genes")
    st.write("Aqu√≠ va tu ejercicio del cap√≠tulo 7")
    img = cargar_imagen()
    if img is not None:
        # ESPACIO PARA TU C√ìDIGO DEL CAP√çTULO 7
        st.info("Pendiente: Integrar c√≥digo del Cap√≠tulo 7")

elif capitulo == "Cap√≠tulo 8":
    st.header("Cap√≠tulo 8: Detecci√≥n de Caracter√≠sticas")
    st.write("Aqu√≠ va tu ejercicio del cap√≠tulo 8")
    img = cargar_imagen()
    if img is not None:
        # ESPACIO PARA TU C√ìDIGO DEL CAP√çTULO 8
        st.info("Pendiente: Integrar c√≥digo del Cap√≠tulo 8")

elif capitulo == "Cap√≠tulo 9":
    st.header("üê∂üê± Cap√≠tulo 9: Clasificaci√≥n de Im√°genes (Perros vs Gatos)")
    
    if classifier is None:
        st.error("‚ùå No se pudieron cargar los modelos. Verifica que los archivos existan en la carpeta 'models/'")
    else:
        uploaded_file = st.file_uploader("Sube una imagen de perro o gato", type=["jpg", "jpeg", "png"], key="cap9")
        
        if uploaded_file is not None:
            image = Image.open(uploaded_file).convert("RGB")
            image_np = np.array(image)
            
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("Imagen Original")
                st.image(image, use_column_width=True)
            
            with col2:
                st.subheader("Predicci√≥n")
                with st.spinner("Clasificando..."):
                    label = classifier.predict(image_np)
                
                if "perro" in label.lower():
                    st.success(f"üê∂ **Predicci√≥n: {label}**")
                else:
                    st.success(f"üê± **Predicci√≥n: {label}**")

elif capitulo == "Cap√≠tulo 10":
    st.header("Cap√≠tulo 10: Procesamiento Avanzado")
    st.write("Aqu√≠ va tu ejercicio del cap√≠tulo 10")
    img = cargar_imagen()
    if img is not None:
        # ESPACIO PARA TU C√ìDIGO DEL CAP√çTULO 10
        st.info("Pendiente: Integrar c√≥digo del Cap√≠tulo 10")

elif capitulo == "Cap√≠tulo 11":
    st.header("Cap√≠tulo 11: Aplicaciones Finales")
    st.write("Aqu√≠ va tu ejercicio del cap√≠tulo 11")
    img = cargar_imagen()
    if img is not None:
        # ESPACIO PARA TU C√ìDIGO DEL CAP√çTULO 11
        st.info("Pendiente: Integrar c√≥digo del Cap√≠tulo 11")

# === Informaci√≥n en el sidebar ===
st.sidebar.markdown("---")
st.sidebar.info("""
**Estado:**
- ‚úÖ Cap√≠tulo 1: Conversi√≥n a escala de grises
- ‚úÖ Cap√≠tulo 9: Clasificaci√≥n Perros/Gatos
- ‚è≥ Dem√°s cap√≠tulos: Pendientes
""")

# === Pie de p√°gina ===
st.markdown("---")
st.markdown("**Desarrollado para el curso de OpenCV** | üìö 11 Cap√≠tulos")